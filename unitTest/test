#!/bin/bash
RED='\033[0;31m'
CYA='\033[0;36m'
GRE='\033[0;32m'
YEL='\033[1;33m'
NC='\033[0m'
cd ../..
PREDIR=$PWD
cd shell

echo -e "\n${CYA}TEST NORMINETTE${NC}\n"

norminette splitter.c str_utils.c expander.c builtIn.c free.c &> unitTest/norm/outNorm
if [ $(grep -c "Error" unitTest/norm/outNorm) == 0 ];
then
	echo -en "${GRE}"
else
	echo -en "${RED}"
fi
cat unitTest/norm/outNorm
echo -en "${NC}"

##########################################################################################
gcc unitTest/testSplitter.c splitter.c str_utils.c free.c -o testSplitter

#-----------------------------------------------------------------------------------------

valgrind ./testSplitter "Test semplice" > unitTest/out/outSplitter1 2> unitTest/leaks/leaksSplitter1
valgrind ./testSplitter "   Test spazi inizio e fine  " > unitTest/out/outSplitter2 2> unitTest/leaks/leaksSplitter2
valgrind ./testSplitter " Test    spazi e	tab " > unitTest/out/outSplitter3 2> unitTest/leaks/leaksSplitter3
valgrind ./testSplitter " Test    \$USER e	tab " > unitTest/out/outSplitter4 2> unitTest/leaks/leaksSplitter4

#-----------------------------------------------------------------------------------------

echo -e "\n${CYA}TEST SPLITTER${NC}"
for i in $(seq 1 4);
do
	echo -en "${YEL}#$i: ${NC}"
	if [ "$(diff unitTest/out/outSplitter$i unitTest/riff/riffSplitter$i)" == ""  ] \
	&& [ $(grep -c "All heap blocks were freed" unitTest/leaks/leaksSplitter$i) == 1 ];
	then
        	echo -en "${GRE}\u2714${NC} "
	else
        	echo -en "${RED}\u2716${NC} "
	fi
done
rm -rf testSplitter

##########################################################################################

gcc unitTest/testFindEnvVar.c expander.c str_utils.c splitter.c -o testFindEnvVar

echo -e "$USER" > unitTest/riff/riffFindEnvVar1		      	      # REFERENCE CREATION
echo -e "$PWD" > unitTest/riff/riffFindEnvVar2

#-----------------------------------------------------------------------------------------

valgrind ./testFindEnvVar "USER" > unitTest/out/outFindEnvVar1 2> unitTest/leaks/leaksFindEnvVar1
valgrind ./testFindEnvVar "PWD" > unitTest/out/outFindEnvVar2 2> unitTest/leaks/leaksFindEnvVar2
valgrind ./testFindEnvVar "user" > unitTest/out/outFindEnvVar3 2> unitTest/leaks/leaksFindEnvVar3
valgrind ./testFindEnvVar "USER=" > unitTest/out/outFindEnvVar4 2> unitTest/leaks/leaksFindEnvVar4
valgrind ./testFindEnvVar "US" > unitTest/out/outFindEnvVar5 2> unitTest/leaks/leaksFindEnvVar5

#-----------------------------------------------------------------------------------------

echo -e "\n${CYA}TEST FIND_ENV_VAR${NC}"
for i in $(seq 1 5);
do
	echo -en "${YEL}#$i: ${NC}"
	if [ "$(diff unitTest/out/outFindEnvVar$i unitTest/riff/riffFindEnvVar$i)" == "" ] \
	&& [ $(grep -c "All heap blocks were freed" unitTest/leaks/leaksFindEnvVar$i) == 1 ];
	then
        	echo -en "${GRE}\u2714${NC} "
	else
        	echo -en "${RED}\u2716${NC} "
	fi
done
rm -rf testFindEnvVar

##########################################################################################

gcc unitTest/testExpander.c expander.c str_utils.c splitter.c free.c -o testExpander

echo -e "variabile\n$USER\ntrovata" > unitTest/riff/riffExpander1     # REFERENCE CREATION
echo -e "variabile\n$PWD\ntrovata" > unitTest/riff/riffExpander2

#-----------------------------------------------------------------------------------------

valgrind ./testExpander "variabile \$USER trovata" > unitTest/out/outExpander1 2> unitTest/leaks/leaksExpander1
valgrind ./testExpander "variabile \$PWD trovata" > unitTest/out/outExpander2 2> unitTest/leaks/leaksExpander2
valgrind ./testExpander "variabile \$USEr non trovata" > unitTest/out/outExpander3 2> unitTest/leaks/leaksExpander3

#------------------------------------------------------------------------------------------

echo -e "\n${CYA}TEST EXPANDER${NC}"
for i in $(seq 1 3);
do
	echo -en "${YEL}#$i: ${NC}"
	if [ "$(diff unitTest/out/outExpander$i unitTest/riff/riffExpander$i)" == "" ] \
	&& [ $(grep -c "All heap blocks were freed" unitTest/leaks/leaksExpander$i) == 1 ];
	then
        	echo -en "${GRE}\u2714${NC} "
	else
        	echo -en "${RED}\u2716${NC} "
	fi
done
rm -rf testExpander

###########################################################################################

gcc unitTest/testCd.c builtIn.c expander.c str_utils.c splitter.c -o testCd

echo -e "$PWD\n$PREDIR" > unitTest/riff/riffCd1				#REFERENCE CREATION
echo -e "$PWD\n$HOME" > unitTest/riff/riffCd2
echo -e "$PWD\n$OLDPWD" > unitTest/riff/riffCd3
echo -e "$PWD\n$HOME" > unitTest/riff/riffCd4
echo -e "$PWD\n$PWD" > unitTest/riff/riffCd5
echo -e "$PWD\n$PWD" > unitTest/riff/riffCd6
echo -e "$PWD\n$PWD/unitTest" > unitTest/riff/riffCd7

#------------------------------------------------------------------------------------------

valgrind ./testCd ".." > unitTest/out/outCd1 2> unitTest/leaks/leaksCd1
valgrind ./testCd > unitTest/out/outCd2 2> unitTest/leaks/leaksCd2
valgrind ./testCd "-" > unitTest/out/outCd3 2> unitTest/leaks/leaksCd3
valgrind ./testCd "~" > unitTest/out/outCd4 2> unitTest/leaks/leaksCd4
valgrind ./testCd "." > unitTest/out/outCd5 2> unitTest/leaks/leaksCd5
valgrind ./testCd "folder" > unitTest/out/outCd6 2> unitTest/leaks/leaksCd6
valgrind ./testCd "unitTest" > unitTest/out/outCd7 2> unitTest/leaks/leaksCd7

#------------------------------------------------------------------------------------------

echo -e "\n${CYA}TEST CD${NC}"
for i in $(seq 1 7);
do
	echo -en "${YEL}#$i: ${NC}"
	if [ "$(diff unitTest/out/outCd$i unitTest/riff/riffCd$i)" == "" ] \
	&& [ $(grep -c "All heap blocks were freed" unitTest/leaks/leaksCd$i) == 1 ];
	then
        	echo -en "${GRE}\u2714${NC} "
	else
        	echo -en "${RED}\u2716${NC} "
	fi
done
rm -rf testCd

##########################################################################################

gcc unitTest/testEnv.c builtIn.c expander.c str_utils.c splitter.c -o testEnv

env > unitTest/riff/riffEnv1 && sed -i '$ d' unitTest/riff/riffEnv1   # REFERENCE CREATION

#------------------------------------------------------------------------------------------

./testEnv > unitTest/out/outEnv1 2>> unitTest/leaks/leaksEnv1 && sed -i '$ d' unitTest/out/outEnv1

#------------------------------------------------------------------------------------------

echo -e "\n${CYA}TEST ENV${NC}"
for i in $(seq 1 1);
do
	echo -en "${YEL}#$i: ${NC}"
	if [ "$(diff unitTest/out/outEnv$i unitTest/riff/riffEnv$i)" == "" ];
	then
        	echo -en "${GRE}\u2714${NC} "
	else
        	echo -en "${RED}\u2716${NC} "
	fi
done
rm -rf testEnv

##########################################################################################

gcc unitTest/testPwd.c builtIn.c expander.c str_utils.c splitter.c -o testPwd

pwd > unitTest/riff/riffPwd1					      # REFERENCE CREATION

#------------------------------------------------------------------------------------------

valgrind ./testPwd > unitTest/out/outPwd1 2> unitTest/leaks/leaksPwd1

#------------------------------------------------------------------------------------------

echo -e "\n${CYA}TEST PWD${NC}"
for i in $(seq 1 1);
do
	echo -en "${YEL}#$i: ${NC}"
	if [ "$(diff unitTest/out/outPwd$i unitTest/riff/riffPwd$i)" == "" ] \
	&& [ $(grep -c "All heap blocks were freed" unitTest/leaks/leaksPwd$i) == 1 ];
	then
        	echo -en "${GRE}\u2714${NC} "
	else
        	echo -en "${RED}\u2716${NC} "
	fi
done
rm -rf testPwd

###########################################################################################

gcc unitTest/testEcho.c builtIn.c expander.c str_utils.c splitter.c -o testEcho

echo "test di espansione $USER" > unitTest/riff/riffEcho2	       # REFERENCE CREATION
echo "test di espansione $USEr" > unitTest/riff/riffEcho3
echo -n "test" "$PWD" "$PwD" "vario\n" > unitTest/riff/riffEcho7

#------------------------------------------------------------------------------------------

valgrind ./testEcho "test di echo" > unitTest/out/outEcho1 2> unitTest/leaks/leaksEcho1
valgrind ./testEcho "test di espansione $USER" > unitTest/out/outEcho2 2> unitTest/leaks/leaksEcho2
valgrind ./testEcho "test di espansione $USEr" > unitTest/out/outEcho3 2> unitTest/leaks/leaksEcho3
valgrind ./testEcho -n "test no newline" > unitTest/out/outEcho4 2> unitTest/leaks/leaksEcho4
valgrind ./testEcho -nawf "test parametri errati" > unitTest/out/outEcho5 2> unitTest/leaks/leaksEcho5
valgrind ./testEcho -n "test" "parametri" "multipli" > unitTest/out/outEcho6 2> unitTest/leaks/leaksEcho6
valgrind ./testEcho -n "test" "$PWD" "$PwD" "vario\n" > unitTest/out/outEcho7 2> unitTest/leaks/leaksEcho7

#------------------------------------------------------------------------------------------

echo -e "\n${CYA}TEST ECHO${NC}"
for i in $(seq 1 7);
do
	echo -en "${YEL}#$i: ${NC}"
	if [ "$(diff unitTest/out/outEcho$i unitTest/riff/riffEcho$i)" == "" ] \
	&& [ $(grep -c "All heap blocks were freed" unitTest/leaks/leaksEcho$i) == 1 ];
	then
        	echo -en "${GRE}\u2714${NC} "
	else
        	echo -en "${RED}\u2716${NC} "
	fi
done
rm -rf testEcho

###########################################################################################

echo -e "\n"
